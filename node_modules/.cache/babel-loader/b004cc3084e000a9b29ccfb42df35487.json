{"ast":null,"code":"import _classCallCheck from \"/Users/jtx007/Development/MOD-5/FinalProject/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jtx007/Development/MOD-5/FinalProject/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jtx007/Development/MOD-5/FinalProject/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jtx007/Development/MOD-5/FinalProject/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jtx007/Development/MOD-5/FinalProject/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jtx007/Development/MOD-5/FinalProject/frontend/src/components/Threads/Threads.js\";\nimport React, { Component } from 'react';\nimport ThreadCard from '../ThreadCard/ThreadCard';\nimport adapters from '../adapters';\nimport { connect } from 'react-redux';\n\nvar Threads =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Threads, _Component);\n\n  function Threads() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Threads);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Threads)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      threads: []\n    };\n\n    _this.fetchThreads = function () {\n      adapters.allThreads().then(function (r) {\n        return r.json();\n      }).then(function (threads) {\n        return _this.setState({\n          threads: threads\n        });\n      });\n    };\n\n    _this.deleteThread = function (id) {\n      _this.setState(function (prevState) {\n        return {\n          threads: _this.filterOutDeletedThreads(prevState.threads, id)\n        };\n      });\n    };\n\n    _this.filterOutDeletedThreads = function (threads, id) {\n      return threads.filter(function (thread) {\n        return thread.id !== id;\n      });\n    };\n\n    _this.genThreads = function (threads) {\n      return threads.map(function (thread) {\n        return React.createElement(ThreadCard, {\n          user: thread.user_id,\n          key: thread.id,\n          thread: thread,\n          getAllThreads: _this.fetchThreads,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Threads, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchThreads();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.threads);\n      return React.createElement(\"ul\", {\n        className: \"collection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, this.genThreads(this.state.threads));\n    }\n  }]);\n\n  return Threads;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loggedIn: state.loggedIn\n  };\n};\n\nexport default connect(mapStateToProps)(Threads);","map":{"version":3,"sources":["/Users/jtx007/Development/MOD-5/FinalProject/frontend/src/components/Threads/Threads.js"],"names":["React","Component","ThreadCard","adapters","connect","Threads","state","threads","fetchThreads","allThreads","then","r","json","setState","deleteThread","id","prevState","filterOutDeletedThreads","filter","thread","genThreads","map","user_id","console","log","mapStateToProps","loggedIn"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;;IAEMC,O;;;;;;;;;;;;;;;;;UAGFC,K,GAAQ;AACJC,MAAAA,OAAO,EAAE;AADL,K;;UASRC,Y,GAAe,YAAM;AACjBL,MAAAA,QAAQ,CAACM,UAAT,GACCC,IADD,CACM,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,OADP,EAECF,IAFD,CAEM,UAAAH,OAAO;AAAA,eAAI,MAAKM,QAAL,CAAc;AAACN,UAAAA,OAAO,EAAPA;AAAD,SAAd,CAAJ;AAAA,OAFb;AAGH,K;;UAGDO,Y,GAAe,UAACC,EAAD,EAAQ;AACnB,YAAKF,QAAL,CAAe,UAAAG,SAAS;AAAA,eAAM;AAC1BT,UAAAA,OAAO,EAAE,MAAKU,uBAAL,CAA6BD,SAAS,CAACT,OAAvC,EAAgDQ,EAAhD;AADiB,SAAN;AAAA,OAAxB;AAIH,K;;UAEDE,uB,GAA0B,UAACV,OAAD,EAAUQ,EAAV,EAAiB;AACvC,aAAOR,OAAO,CAACW,MAAR,CAAe,UAAAC,MAAM,EAAI;AAC5B,eAAOA,MAAM,CAACJ,EAAP,KAAcA,EAArB;AACH,OAFM,CAAP;AAGH,K;;UAMAK,U,GAAa,UAACb,OAAD,EAAa;AACvB,aAAOA,OAAO,CAACc,GAAR,CAAY,UAAAF,MAAM,EAAI;AACzB,eAAO,oBAAC,UAAD;AAAY,UAAA,IAAI,EAAEA,MAAM,CAACG,OAAzB;AAAkC,UAAA,GAAG,EAAEH,MAAM,CAACJ,EAA9C;AAAkD,UAAA,MAAM,EAAEI,MAA1D;AAAkE,UAAA,aAAa,EAAE,MAAKX,YAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFM,CAAP;AAGH,K;;;;;;;wCAhCmB;AAChB,WAAKA,YAAL;AACH;;;6BAkCQ;AACLe,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWC,OAAvB;AACA,aACI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,KAAKa,UAAL,CAAgB,KAAKd,KAAL,CAAWC,OAA3B,CADD,CADJ;AAKH;;;;EAnDiBN,S;;AAsDtB,IAAMwB,eAAe,GAAG,SAAlBA,eAAkB,CAACnB,KAAD,EAAW;AAC/B,SAAO;AACLoB,IAAAA,QAAQ,EAAEpB,KAAK,CAACoB;AADX,GAAP;AAGH,CAJD;;AAOA,eAAetB,OAAO,CAACqB,eAAD,CAAP,CAAyBpB,OAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport ThreadCard from '../ThreadCard/ThreadCard'\nimport adapters from '../adapters'\nimport { connect } from 'react-redux'\n\nclass Threads extends Component {\n\n\n    state = {\n        threads: []\n    }\n\n\n    componentDidMount() {\n        this.fetchThreads()\n    }\n\n    fetchThreads = () => {\n        adapters.allThreads()\n        .then(r => r.json())\n        .then(threads => this.setState({threads}))   \n    }\n\n\n    deleteThread = (id) => {\n        this.setState( prevState =>  ({\n            threads: this.filterOutDeletedThreads(prevState.threads, id)\n\n        }))\n    }\n\n    filterOutDeletedThreads = (threads, id) => {\n        return threads.filter(thread => {\n            return thread.id !== id\n        })\n    }\n\n\n\n\n\n     genThreads = (threads) => {\n        return threads.map(thread => {\n            return <ThreadCard user={thread.user_id} key={thread.id} thread={thread} getAllThreads={this.fetchThreads} />\n        })\n    }\n\n\n\n    render() {\n        console.log(this.state.threads)\n        return (\n            <ul className=\"collection\">\n            {this.genThreads(this.state.threads)}\n            </ul>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      loggedIn: state.loggedIn\n    }\n}\n\n\nexport default connect(mapStateToProps)(Threads)"]},"metadata":{},"sourceType":"module"}